% Evolution of the Document Model
% [Sébastien Boisgérault][email], MINES ParisTech

[email]: mailto:Sebastien.Boisgerault@mines-paristech.fr

---
license: "[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0)"
---

Introduction
================================================================================

The `Text.Pandoc.Definition` is the module of the [pandoc-types] Haskell package that contains the definitions for the Pandoc data structure, 
used by pandoc to represent structured documents.

Actually, there is not a single model of document, 
but a collection of models since the original design 
has evolved over time. 
Unless you deliberately use a fixed version of pandoc
-- and therefore a unique document model --
you may at some point need to manage several
models of documents.

To ease this work, we describe here the evolution of this model, 
from the creation of pandoc-types to the present day.

[pandoc-types]: https://hackage.haskell.org/package/pandoc-types


Evolutions
================================================================================

Version 1.7
--------------------------------------------------------------------------------

The original model, included below for the sake of completeness:
66 lines only, that describe the structure of any pandoc document.

    data Pandoc = Pandoc Meta [Block]
    data Meta
      = Meta {docTitle :: [Inline],
              docAuthors :: [[Inline]],
              docDate :: [Inline]}
    data Alignment
      = AlignLeft | AlignRight | AlignCenter | AlignDefault
    type ListAttributes = (Int, ListNumberStyle, ListNumberDelim)
    data ListNumberStyle
      = DefaultStyle
      | Example
      | Decimal
      | LowerRoman
      | UpperRoman
      | LowerAlpha
      | UpperAlpha
    data ListNumberDelim = DefaultDelim | Period | OneParen | TwoParens
    type Attr = (String, [String], [(String, String)])
    type TableCell = [Block]
    data Block
      = Plain [Inline]
      | Para [Inline]
      | CodeBlock Attr String
      | RawHtml String
      | BlockQuote [Block]
      | OrderedList ListAttributes [[Block]]
      | BulletList [[Block]]
      | DefinitionList [([Inline], [[Block]])]
      | Header Int [Inline]
      | HorizontalRule
      | Table [Inline] [Alignment] [Double] [TableCell] [[TableCell]]
      | Null
    data QuoteType = SingleQuote | DoubleQuote
    type Target = (String, String)
    data MathType = DisplayMath | InlineMath
    data Inline
      = Str String
      | Emph [Inline]
      | Strong [Inline]
      | Strikeout [Inline]
      | Superscript [Inline]
      | Subscript [Inline]
      | SmallCaps [Inline]
      | Quoted QuoteType [Inline]
      | Cite [Citation] [Inline]
      | Code String
      | Space
      | EmDash
      | EnDash
      | Apostrophe
      | Ellipses
      | LineBreak
      | Math MathType String
      | TeX String
      | HtmlInline String
      | Link [Inline] Target
      | Image [Inline] Target
      | Note [Block]
    data Citation
      = Citation {citationId :: String,
                  citationPrefix :: [Inline],
                  citationSuffix :: [Inline],
                  citationMode :: CitationMode,
                  citationNoteNum :: Int,
                  citationHash :: Int}
    data CitationMode = AuthorInText | SuppressAuthor | NormalCitation

Versions 1.8 to 1.8.2
--------------------------------------------------------------------------------

### Inline code gets attributes

The code block element of the 1.7 document model has an attributes 
(`Attr`) field.
For example, a code block described by

    ~~~~ {#mycode .haskell .numberLines startFrom="100"}
    qsort []     = []
    qsort (x:xs) = qsort (filter (< x) xs) ++ [x] ++
                   qsort (filter (>= x) xs)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

has the attributes field

    [["mycode",["haskell","numberLines"],[["startFrom","100"]]]

This triple should be interpreted as id, classes and key-value pairs,
something very similar to the model of HTML elements.

In the 1.7 model, however, inline code lack attributes;
in the 1.8 version, they get this field too:

    data Inline
      = ...
      | Code Attr String
      | ...

For example, the markdown text

    `<$>`{.haskell}

attaches the class `haskell` to the inline code `<$>`.


### Raw elements

In the 1.7 model, HTML fragments could be inserted in documents
as `RawHtml` blocks or `HtmlInline` inlines; TeX fragments could
only be inline, with the `TeX` type.

In the 1.8 model, these constructs are generalized and merged:
native (HTML or TeX) elements are now described either as raw 
blocks or raw inlines:

    type Format = String
    data Block
      = ...
      | RawBlock Format String
      | ...
    data Inline
      = ...
      | RawInline Format String
      | ...

Concretely, the format is either "tex" or "html" 
but this is a not a hard constraint of the document model.


Versions 1.9.0.1 to 1.9.1
--------------------------------------------------------------------------------

### Removal of em-dash, en-dash, apostrophe and ellipses

`EmDash`, `EnDash`, `Apostrophe` and `Ellipses` disappear 
from the `Inline` type. You can still use the corresponding 
constructs in you markdown text, but they will be described
as regular string (`Str`) instances, which makes sense: 
since the unicode standard knows about them,
it is pointless to have an extra construct.


Version 1.12
--------------------------------------------------------------------------------

### A new metadata model

### Introduction of div and span

### Headers get attributes

### `Format` becomes a `newtype`


